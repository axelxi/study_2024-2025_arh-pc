%include 'in_out.asm'

SECTION .data
msg db "f(x1)+f(x2)+...+f(xn) =  ",0

SECTION .text
global _start

_start:
    pop ecx ; Извлекаем из стека в `ecx` количество
	    ; аргументов (первое значение в стеке)
    pop edx ; Извлекаем из стека в `edx` имя программы
	    ; (второе значение в стеке)
    sub ecx,1 ; Уменьшаем `ecx` на 1 (количество
	    ; аргументов без названия программы)
    mov esi,0 ; Используем `esi` для хранения
	    ; промежуточных сумм
next:
    cmp ecx,0h ; проверяем, есть ли еще аргументы
    jz _end ; если аргументов нет выходим из цикла
	    ; (переход на метку `_end`)
    pop eax ; иначе извлекаем следующий аргумент из стека
    call atoi ; преобразуем символ в число
    mov ebx,12  ; ebx = 12
    mul ebx  ; eax (x) * 12
    sub eax,7   ; eax - 7
    add esi,eax ; добавляем к промежуточной сумме
	    ; след. аргумент `esi=esi+eax`
    loop next ; переход к обработке следующего аргумента
_end:
    mov eax, msg ; вывод сообщения "f(x1)+f(x2)+...+f(n) =  "
    call sprint
    mov eax, esi ; записываем сумму в регистр `eax`
    call iprintLF ; печать результата
    call quit ; завершение программы